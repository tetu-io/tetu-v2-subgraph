// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContractInitialized extends ethereum.Event {
  get params(): ContractInitialized__Params {
    return new ContractInitialized__Params(this);
  }
}

export class ContractInitialized__Params {
  _event: ContractInitialized;

  constructor(event: ContractInitialized) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get block(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get locktime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get depositType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get ts(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class PawnshopWhitelisted extends ethereum.Event {
  get params(): PawnshopWhitelisted__Params {
    return new PawnshopWhitelisted__Params(this);
  }
}

export class PawnshopWhitelisted__Params {
  _event: PawnshopWhitelisted;

  constructor(event: PawnshopWhitelisted) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevisionIncreased extends ethereum.Event {
  get params(): RevisionIncreased__Params {
    return new RevisionIncreased__Params(this);
  }
}

export class RevisionIncreased__Params {
  _event: RevisionIncreased;

  constructor(event: RevisionIncreased) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldLogic(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Merged extends ethereum.Event {
  get params(): Merged__Params {
    return new Merged__Params(this);
  }
}

export class Merged__Params {
  _event: Merged;

  constructor(event: Merged) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get from(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VeTetuAbi__pointHistoryResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }

  get ts(): BigInt {
    return this[2].toBigInt();
  }

  get blk(): BigInt {
    return this[3].toBigInt();
  }
}

export class VeTetuAbi__userPointHistoryResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }

  get ts(): BigInt {
    return this[2].toBigInt();
  }

  get blk(): BigInt {
    return this[3].toBigInt();
  }
}

export class VeTetuAbi extends ethereum.SmartContract {
  static bind(address: Address): VeTetuAbi {
    return new VeTetuAbi("VeTetuAbi", address);
  }

  CONTROLLABLE_VERSION(): string {
    let result = super.call(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_CONTROLLABLE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MAX_ATTACHMENTS(): BigInt {
    let result = super.call(
      "MAX_ATTACHMENTS",
      "MAX_ATTACHMENTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_ATTACHMENTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ATTACHMENTS",
      "MAX_ATTACHMENTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VE_VERSION(): string {
    let result = super.call("VE_VERSION", "VE_VERSION():(string)", []);

    return result[0].toString();
  }

  try_VE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VE_VERSION", "VE_VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  attachments(param0: BigInt): BigInt {
    let result = super.call("attachments", "attachments(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_attachments(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attachments",
      "attachments(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAtNFT(_tokenId: BigInt, _block: BigInt): BigInt {
    let result = super.call(
      "balanceOfAtNFT",
      "balanceOfAtNFT(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfAtNFT(
    _tokenId: BigInt,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAtNFT",
      "balanceOfAtNFT(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfNFT(_tokenId: BigInt): BigInt {
    let result = super.call("balanceOfNFT", "balanceOfNFT(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfNFT(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfNFT",
      "balanceOfNFT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfNFTAt(_tokenId: BigInt, _t: BigInt): BigInt {
    let result = super.call(
      "balanceOfNFTAt",
      "balanceOfNFTAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_t)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfNFTAt(
    _tokenId: BigInt,
    _t: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfNFTAt",
      "balanceOfNFTAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_t)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockTimestamp(): BigInt {
    let result = super.call("blockTimestamp", "blockTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blockTimestamp",
      "blockTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createLock(_token: Address, _value: BigInt, _lockDuration: BigInt): BigInt {
    let result = super.call(
      "createLock",
      "createLock(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lockDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLock(
    _token: Address,
    _value: BigInt,
    _lockDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLock",
      "createLock(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lockDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createLockFor(
    _token: Address,
    _value: BigInt,
    _lockDuration: BigInt,
    _to: Address
  ): BigInt {
    let result = super.call(
      "createLockFor",
      "createLockFor(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lockDuration),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLockFor(
    _token: Address,
    _value: BigInt,
    _lockDuration: BigInt,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLockFor",
      "createLockFor(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lockDuration),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  created(): BigInt {
    let result = super.call("created", "created():(uint256)", []);

    return result[0].toBigInt();
  }

  try_created(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("created", "created():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createdBlock(): BigInt {
    let result = super.call("createdBlock", "createdBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdBlock", "createdBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastUserSlope(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getLastUserSlope",
      "getLastUserSlope(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getLastUserSlope(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastUserSlope",
      "getLastUserSlope(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(_spender: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    _spender: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isController(_value: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isController(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGovernance(_value: Address): boolean {
    let result = super.call("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isGovernance(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidToken(param0: Address): boolean {
    let result = super.call("isValidToken", "isValidToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isValidToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidToken", "isValidToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedPawnshop(param0: Address): boolean {
    let result = super.call(
      "isWhitelistedPawnshop",
      "isWhitelistedPawnshop(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedPawnshop(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedPawnshop",
      "isWhitelistedPawnshop(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedAmounts(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "lockedAmounts",
      "lockedAmounts(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_lockedAmounts(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedAmounts",
      "lockedAmounts(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedDerivedAmount(param0: BigInt): BigInt {
    let result = super.call(
      "lockedDerivedAmount",
      "lockedDerivedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lockedDerivedAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedDerivedAmount",
      "lockedDerivedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedEnd(param0: BigInt): BigInt {
    let result = super.call("lockedEnd", "lockedEnd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lockedEnd(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedEnd", "lockedEnd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerToOperators(param0: Address, param1: Address): boolean {
    let result = super.call(
      "ownerToOperators",
      "ownerToOperators(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_ownerToOperators(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ownerToOperators",
      "ownerToOperators(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownershipChange(param0: BigInt): BigInt {
    let result = super.call(
      "ownershipChange",
      "ownershipChange(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_ownershipChange(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipChange",
      "ownershipChange(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformVoter(): Address {
    let result = super.call("platformVoter", "platformVoter():(address)", []);

    return result[0].toAddress();
  }

  try_platformVoter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformVoter",
      "platformVoter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pointHistory(_loc: BigInt): VeTetuAbi__pointHistoryResultValue0Struct {
    let result = super.call(
      "pointHistory",
      "pointHistory(uint256):((int128,int128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_loc)]
    );

    return changetype<VeTetuAbi__pointHistoryResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_pointHistory(
    _loc: BigInt
  ): ethereum.CallResult<VeTetuAbi__pointHistoryResultValue0Struct> {
    let result = super.tryCall(
      "pointHistory",
      "pointHistory(uint256):((int128,int128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_loc)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VeTetuAbi__pointHistoryResultValue0Struct>(value[0].toTuple())
    );
  }

  previousImplementation(): Address {
    let result = super.call(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_previousImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  revision(): BigInt {
    let result = super.call("revision", "revision():(uint256)", []);

    return result[0].toBigInt();
  }

  try_revision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("revision", "revision():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slopeChanges(param0: BigInt): BigInt {
    let result = super.call("slopeChanges", "slopeChanges(uint256):(int128)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_slopeChanges(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slopeChanges",
      "slopeChanges(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(_interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenId(): BigInt {
    let result = super.call("tokenId", "tokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenId", "tokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _tokenIndex: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_tokenIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _tokenIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_tokenIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToOwnerIndex(param0: BigInt): BigInt {
    let result = super.call(
      "tokenToOwnerIndex",
      "tokenToOwnerIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenToOwnerIndex(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToOwnerIndex",
      "tokenToOwnerIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenWeights(param0: Address): BigInt {
    let result = super.call("tokenWeights", "tokenWeights(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenWeights(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenWeights",
      "tokenWeights(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAt(_block: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAt(_block: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAtT(t: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAtT",
      "totalSupplyAtT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(t)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAtT(t: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAtT",
      "totalSupplyAtT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(t)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userPointEpoch(param0: BigInt): BigInt {
    let result = super.call(
      "userPointEpoch",
      "userPointEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_userPointEpoch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPointEpoch",
      "userPointEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userPointHistory(
    _tokenId: BigInt,
    _loc: BigInt
  ): VeTetuAbi__userPointHistoryResultValue0Struct {
    let result = super.call(
      "userPointHistory",
      "userPointHistory(uint256,uint256):((int128,int128,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_loc)
      ]
    );

    return changetype<VeTetuAbi__userPointHistoryResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_userPointHistory(
    _tokenId: BigInt,
    _loc: BigInt
  ): ethereum.CallResult<VeTetuAbi__userPointHistoryResultValue0Struct> {
    let result = super.tryCall(
      "userPointHistory",
      "userPointHistory(uint256,uint256):((int128,int128,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_loc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VeTetuAbi__userPointHistoryResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  userPointHistoryTs(_tokenId: BigInt, _idx: BigInt): BigInt {
    let result = super.call(
      "userPointHistoryTs",
      "userPointHistoryTs(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );

    return result[0].toBigInt();
  }

  try_userPointHistoryTs(
    _tokenId: BigInt,
    _idx: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPointHistoryTs",
      "userPointHistoryTs(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voted(param0: BigInt): BigInt {
    let result = super.call("voted", "voted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_voted(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("voted", "voted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voter(): Address {
    let result = super.call("voter", "voter():(address)", []);

    return result[0].toAddress();
  }

  try_voter(): ethereum.CallResult<Address> {
    let result = super.tryCall("voter", "voter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensLength(): BigInt {
    let result = super.call("tokensLength", "tokensLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensLength", "tokensLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AbstainCall extends ethereum.Call {
  get inputs(): AbstainCall__Inputs {
    return new AbstainCall__Inputs(this);
  }

  get outputs(): AbstainCall__Outputs {
    return new AbstainCall__Outputs(this);
  }
}

export class AbstainCall__Inputs {
  _call: AbstainCall;

  constructor(call: AbstainCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AbstainCall__Outputs {
  _call: AbstainCall;

  constructor(call: AbstainCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _approved(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttachTokenCall extends ethereum.Call {
  get inputs(): AttachTokenCall__Inputs {
    return new AttachTokenCall__Inputs(this);
  }

  get outputs(): AttachTokenCall__Outputs {
    return new AttachTokenCall__Outputs(this);
  }
}

export class AttachTokenCall__Inputs {
  _call: AttachTokenCall;

  constructor(call: AttachTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AttachTokenCall__Outputs {
  _call: AttachTokenCall;

  constructor(call: AttachTokenCall) {
    this._call = call;
  }
}

export class CheckpointCall extends ethereum.Call {
  get inputs(): CheckpointCall__Inputs {
    return new CheckpointCall__Inputs(this);
  }

  get outputs(): CheckpointCall__Outputs {
    return new CheckpointCall__Outputs(this);
  }
}

export class CheckpointCall__Inputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class CheckpointCall__Outputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class CreateLockCall extends ethereum.Call {
  get inputs(): CreateLockCall__Inputs {
    return new CreateLockCall__Inputs(this);
  }

  get outputs(): CreateLockCall__Outputs {
    return new CreateLockCall__Outputs(this);
  }
}

export class CreateLockCall__Inputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateLockCall__Outputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateLockForCall extends ethereum.Call {
  get inputs(): CreateLockForCall__Inputs {
    return new CreateLockForCall__Inputs(this);
  }

  get outputs(): CreateLockForCall__Outputs {
    return new CreateLockForCall__Outputs(this);
  }
}

export class CreateLockForCall__Inputs {
  _call: CreateLockForCall;

  constructor(call: CreateLockForCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateLockForCall__Outputs {
  _call: CreateLockForCall;

  constructor(call: CreateLockForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DetachTokenCall extends ethereum.Call {
  get inputs(): DetachTokenCall__Inputs {
    return new DetachTokenCall__Inputs(this);
  }

  get outputs(): DetachTokenCall__Outputs {
    return new DetachTokenCall__Outputs(this);
  }
}

export class DetachTokenCall__Inputs {
  _call: DetachTokenCall;

  constructor(call: DetachTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DetachTokenCall__Outputs {
  _call: DetachTokenCall;

  constructor(call: DetachTokenCall) {
    this._call = call;
  }
}

export class IncreaseAmountCall extends ethereum.Call {
  get inputs(): IncreaseAmountCall__Inputs {
    return new IncreaseAmountCall__Inputs(this);
  }

  get outputs(): IncreaseAmountCall__Outputs {
    return new IncreaseAmountCall__Outputs(this);
  }
}

export class IncreaseAmountCall__Inputs {
  _call: IncreaseAmountCall;

  constructor(call: IncreaseAmountCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IncreaseAmountCall__Outputs {
  _call: IncreaseAmountCall;

  constructor(call: IncreaseAmountCall) {
    this._call = call;
  }
}

export class IncreaseRevisionCall extends ethereum.Call {
  get inputs(): IncreaseRevisionCall__Inputs {
    return new IncreaseRevisionCall__Inputs(this);
  }

  get outputs(): IncreaseRevisionCall__Outputs {
    return new IncreaseRevisionCall__Outputs(this);
  }
}

export class IncreaseRevisionCall__Inputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }

  get oldLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IncreaseRevisionCall__Outputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }
}

export class IncreaseUnlockTimeCall extends ethereum.Call {
  get inputs(): IncreaseUnlockTimeCall__Inputs {
    return new IncreaseUnlockTimeCall__Inputs(this);
  }

  get outputs(): IncreaseUnlockTimeCall__Outputs {
    return new IncreaseUnlockTimeCall__Outputs(this);
  }
}

export class IncreaseUnlockTimeCall__Inputs {
  _call: IncreaseUnlockTimeCall;

  constructor(call: IncreaseUnlockTimeCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseUnlockTimeCall__Outputs {
  _call: IncreaseUnlockTimeCall;

  constructor(call: IncreaseUnlockTimeCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get controller_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class VotingCall extends ethereum.Call {
  get inputs(): VotingCall__Inputs {
    return new VotingCall__Inputs(this);
  }

  get outputs(): VotingCall__Outputs {
    return new VotingCall__Outputs(this);
  }
}

export class VotingCall__Inputs {
  _call: VotingCall;

  constructor(call: VotingCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VotingCall__Outputs {
  _call: VotingCall;

  constructor(call: VotingCall) {
    this._call = call;
  }
}

export class WhitelistPawnshopCall extends ethereum.Call {
  get inputs(): WhitelistPawnshopCall__Inputs {
    return new WhitelistPawnshopCall__Inputs(this);
  }

  get outputs(): WhitelistPawnshopCall__Outputs {
    return new WhitelistPawnshopCall__Outputs(this);
  }
}

export class WhitelistPawnshopCall__Inputs {
  _call: WhitelistPawnshopCall;

  constructor(call: WhitelistPawnshopCall) {
    this._call = call;
  }

  get pawnshop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistPawnshopCall__Outputs {
  _call: WhitelistPawnshopCall;

  constructor(call: WhitelistPawnshopCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
