// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BalanceDecreased extends ethereum.Event {
  get params(): BalanceDecreased__Params {
    return new BalanceDecreased__Params(this);
  }
}

export class BalanceDecreased__Params {
  _event: BalanceDecreased;

  constructor(event: BalanceDecreased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BalanceIncreased extends ethereum.Event {
  get params(): BalanceIncreased__Params {
    return new BalanceIncreased__Params(this);
  }
}

export class BalanceIncreased__Params {
  _event: BalanceIncreased;

  constructor(event: BalanceIncreased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BribeDeposit extends ethereum.Event {
  get params(): BribeDeposit__Params {
    return new BribeDeposit__Params(this);
  }
}

export class BribeDeposit__Params {
  _event: BribeDeposit;

  constructor(event: BribeDeposit) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get veId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BribeWithdraw extends ethereum.Event {
  get params(): BribeWithdraw__Params {
    return new BribeWithdraw__Params(this);
  }
}

export class BribeWithdraw__Params {
  _event: BribeWithdraw;

  constructor(event: BribeWithdraw) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get veId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimRewards extends ethereum.Event {
  get params(): ClaimRewards__Params {
    return new ClaimRewards__Params(this);
  }
}

export class ClaimRewards__Params {
  _event: ClaimRewards;

  constructor(event: ClaimRewards) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get recepient(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ContractInitialized extends ethereum.Event {
  get params(): ContractInitialized__Params {
    return new ContractInitialized__Params(this);
  }
}

export class ContractInitialized__Params {
  _event: ContractInitialized;

  constructor(event: ContractInitialized) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get block(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NotifyReward extends ethereum.Event {
  get params(): NotifyReward__Params {
    return new NotifyReward__Params(this);
  }
}

export class NotifyReward__Params {
  _event: NotifyReward;

  constructor(event: NotifyReward) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RevisionIncreased extends ethereum.Event {
  get params(): RevisionIncreased__Params {
    return new RevisionIncreased__Params(this);
  }
}

export class RevisionIncreased__Params {
  _event: RevisionIncreased;

  constructor(event: RevisionIncreased) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldLogic(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MultiBribeAbi__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class MultiBribeAbi__getPriorRewardPerTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class MultiBribeAbi__rewardPerTokenCheckpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class MultiBribeAbi__supplyCheckpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class MultiBribeAbi extends ethereum.SmartContract {
  static bind(address: Address): MultiBribeAbi {
    return new MultiBribeAbi("MultiBribeAbi", address);
  }

  CONTROLLABLE_VERSION(): string {
    let result = super.call(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_CONTROLLABLE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MULTI_BRIBE_VERSION(): string {
    let result = super.call(
      "MULTI_BRIBE_VERSION",
      "MULTI_BRIBE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_MULTI_BRIBE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "MULTI_BRIBE_VERSION",
      "MULTI_BRIBE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MULTI_POOL_VERSION(): string {
    let result = super.call(
      "MULTI_POOL_VERSION",
      "MULTI_POOL_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_MULTI_POOL_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "MULTI_POOL_VERSION",
      "MULTI_POOL_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addressToTokenId(adr: Address): BigInt {
    let result = super.call(
      "addressToTokenId",
      "addressToTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(adr)]
    );

    return result[0].toBigInt();
  }

  try_addressToTokenId(adr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToTokenId",
      "addressToTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(adr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): MultiBribeAbi__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new MultiBribeAbi__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkpoints(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<MultiBribeAbi__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiBribeAbi__checkpointsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  created(): BigInt {
    let result = super.call("created", "created():(uint256)", []);

    return result[0].toBigInt();
  }

  try_created(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("created", "created():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createdBlock(): BigInt {
    let result = super.call("createdBlock", "createdBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdBlock", "createdBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultRewardToken(): Address {
    let result = super.call(
      "defaultRewardToken",
      "defaultRewardToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultRewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultRewardToken",
      "defaultRewardToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  derivedBalance(token: Address, account: Address): BigInt {
    let result = super.call(
      "derivedBalance",
      "derivedBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_derivedBalance(
    token: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "derivedBalance",
      "derivedBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  derivedBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "derivedBalances",
      "derivedBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_derivedBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "derivedBalances",
      "derivedBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  derivedSupply(param0: Address): BigInt {
    let result = super.call(
      "derivedSupply",
      "derivedSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_derivedSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "derivedSupply",
      "derivedSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(stakeToken: Address, rewardToken: Address, account: Address): BigInt {
    let result = super.call(
      "earned",
      "earned(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_earned(
    stakeToken: Address,
    rewardToken: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earned",
      "earned(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriorBalanceIndex(
    stakingToken: Address,
    account: Address,
    timestamp: BigInt
  ): BigInt {
    let result = super.call(
      "getPriorBalanceIndex",
      "getPriorBalanceIndex(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorBalanceIndex(
    stakingToken: Address,
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorBalanceIndex",
      "getPriorBalanceIndex(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriorRewardPerToken(
    stakingToken: Address,
    rewardToken: Address,
    timestamp: BigInt
  ): MultiBribeAbi__getPriorRewardPerTokenResult {
    let result = super.call(
      "getPriorRewardPerToken",
      "getPriorRewardPerToken(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return new MultiBribeAbi__getPriorRewardPerTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPriorRewardPerToken(
    stakingToken: Address,
    rewardToken: Address,
    timestamp: BigInt
  ): ethereum.CallResult<MultiBribeAbi__getPriorRewardPerTokenResult> {
    let result = super.tryCall(
      "getPriorRewardPerToken",
      "getPriorRewardPerToken(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiBribeAbi__getPriorRewardPerTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPriorSupplyIndex(stakingToken: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "getPriorSupplyIndex",
      "getPriorSupplyIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorSupplyIndex(
    stakingToken: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorSupplyIndex",
      "getPriorSupplyIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakingToken),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isController(_value: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isController(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGovernance(_value: Address): boolean {
    let result = super.call("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isGovernance(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRewardToken(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isRewardToken",
      "isRewardToken(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isRewardToken(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRewardToken",
      "isRewardToken(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStakeToken(token: Address): boolean {
    let result = super.call("isStakeToken", "isStakeToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isStakeToken(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStakeToken", "isStakeToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastEarn(param0: Address, param1: Address, param2: Address): BigInt {
    let result = super.call(
      "lastEarn",
      "lastEarn(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_lastEarn(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastEarn",
      "lastEarn(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "lastUpdateTime",
      "lastUpdateTime(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_lastUpdateTime(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  left(stakeToken: Address, rewardToken: Address): BigInt {
    let result = super.call("left", "left(address,address):(uint256)", [
      ethereum.Value.fromAddress(stakeToken),
      ethereum.Value.fromAddress(rewardToken)
    ]);

    return result[0].toBigInt();
  }

  try_left(
    stakeToken: Address,
    rewardToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("left", "left(address,address):(uint256)", [
      ethereum.Value.fromAddress(stakeToken),
      ethereum.Value.fromAddress(rewardToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodFinish(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "periodFinish",
      "periodFinish(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_periodFinish(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodFinish",
      "periodFinish(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousImplementation(): Address {
    let result = super.call(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_previousImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  revision(): BigInt {
    let result = super.call("revision", "revision():(uint256)", []);

    return result[0].toBigInt();
  }

  try_revision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("revision", "revision():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerToken(stakeToken: Address, rewardToken: Address): BigInt {
    let result = super.call(
      "rewardPerToken",
      "rewardPerToken(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(rewardToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_rewardPerToken(
    stakeToken: Address,
    rewardToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(rewardToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenCheckpoints(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): MultiBribeAbi__rewardPerTokenCheckpointsResult {
    let result = super.call(
      "rewardPerTokenCheckpoints",
      "rewardPerTokenCheckpoints(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new MultiBribeAbi__rewardPerTokenCheckpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rewardPerTokenCheckpoints(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<MultiBribeAbi__rewardPerTokenCheckpointsResult> {
    let result = super.tryCall(
      "rewardPerTokenCheckpoints",
      "rewardPerTokenCheckpoints(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiBribeAbi__rewardPerTokenCheckpointsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  rewardPerTokenNumCheckpoints(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "rewardPerTokenNumCheckpoints",
      "rewardPerTokenNumCheckpoints(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenNumCheckpoints(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenNumCheckpoints",
      "rewardPerTokenNumCheckpoints(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "rewardRate",
      "rewardRate(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_rewardRate(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardRate",
      "rewardRate(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "rewardTokens",
      "rewardTokens(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_rewardTokens(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokensLength(token: Address): BigInt {
    let result = super.call(
      "rewardTokensLength",
      "rewardTokensLength(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_rewardTokensLength(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokensLength",
      "rewardTokensLength(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyCheckpoints(
    param0: Address,
    param1: BigInt
  ): MultiBribeAbi__supplyCheckpointsResult {
    let result = super.call(
      "supplyCheckpoints",
      "supplyCheckpoints(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MultiBribeAbi__supplyCheckpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_supplyCheckpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<MultiBribeAbi__supplyCheckpointsResult> {
    let result = super.tryCall(
      "supplyCheckpoints",
      "supplyCheckpoints(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiBribeAbi__supplyCheckpointsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supplyNumCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "supplyNumCheckpoints",
      "supplyNumCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_supplyNumCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyNumCheckpoints",
      "supplyNumCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdToAddress(tokenId: BigInt): Address {
    let result = super.call(
      "tokenIdToAddress",
      "tokenIdToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toAddress();
  }

  try_tokenIdToAddress(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenIdToAddress",
      "tokenIdToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(param0: Address): BigInt {
    let result = super.call("totalSupply", "totalSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenStored(
    param0: Address,
    param1: Address,
    param2: Address
  ): BigInt {
    let result = super.call(
      "userRewardPerTokenStored",
      "userRewardPerTokenStored(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenStored(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenStored",
      "userRewardPerTokenStored(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ve(): Address {
    let result = super.call("ve", "ve():(address)", []);

    return result[0].toAddress();
  }

  try_ve(): ethereum.CallResult<Address> {
    let result = super.tryCall("ve", "ve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voter(): Address {
    let result = super.call("voter", "voter():(address)", []);

    return result[0].toAddress();
  }

  try_voter(): ethereum.CallResult<Address> {
    let result = super.tryCall("voter", "voter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BatchUpdateRewardPerTokenCall extends ethereum.Call {
  get inputs(): BatchUpdateRewardPerTokenCall__Inputs {
    return new BatchUpdateRewardPerTokenCall__Inputs(this);
  }

  get outputs(): BatchUpdateRewardPerTokenCall__Outputs {
    return new BatchUpdateRewardPerTokenCall__Outputs(this);
  }
}

export class BatchUpdateRewardPerTokenCall__Inputs {
  _call: BatchUpdateRewardPerTokenCall;

  constructor(call: BatchUpdateRewardPerTokenCall) {
    this._call = call;
  }

  get stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxRuns(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BatchUpdateRewardPerTokenCall__Outputs {
  _call: BatchUpdateRewardPerTokenCall;

  constructor(call: BatchUpdateRewardPerTokenCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get veId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GetAllRewardsCall extends ethereum.Call {
  get inputs(): GetAllRewardsCall__Inputs {
    return new GetAllRewardsCall__Inputs(this);
  }

  get outputs(): GetAllRewardsCall__Outputs {
    return new GetAllRewardsCall__Outputs(this);
  }
}

export class GetAllRewardsCall__Inputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get veId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetAllRewardsCall__Outputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }
}

export class GetAllRewardsForTokensCall extends ethereum.Call {
  get inputs(): GetAllRewardsForTokensCall__Inputs {
    return new GetAllRewardsForTokensCall__Inputs(this);
  }

  get outputs(): GetAllRewardsForTokensCall__Outputs {
    return new GetAllRewardsForTokensCall__Outputs(this);
  }
}

export class GetAllRewardsForTokensCall__Inputs {
  _call: GetAllRewardsForTokensCall;

  constructor(call: GetAllRewardsForTokensCall) {
    this._call = call;
  }

  get _vaults(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get veId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetAllRewardsForTokensCall__Outputs {
  _call: GetAllRewardsForTokensCall;

  constructor(call: GetAllRewardsForTokensCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get veId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class IncreaseRevisionCall extends ethereum.Call {
  get inputs(): IncreaseRevisionCall__Inputs {
    return new IncreaseRevisionCall__Inputs(this);
  }

  get outputs(): IncreaseRevisionCall__Outputs {
    return new IncreaseRevisionCall__Outputs(this);
  }
}

export class IncreaseRevisionCall__Inputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }

  get oldLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IncreaseRevisionCall__Outputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get controller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ve(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _defaultReward(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class RegisterRewardTokenCall extends ethereum.Call {
  get inputs(): RegisterRewardTokenCall__Inputs {
    return new RegisterRewardTokenCall__Inputs(this);
  }

  get outputs(): RegisterRewardTokenCall__Outputs {
    return new RegisterRewardTokenCall__Outputs(this);
  }
}

export class RegisterRewardTokenCall__Inputs {
  _call: RegisterRewardTokenCall;

  constructor(call: RegisterRewardTokenCall) {
    this._call = call;
  }

  get stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterRewardTokenCall__Outputs {
  _call: RegisterRewardTokenCall;

  constructor(call: RegisterRewardTokenCall) {
    this._call = call;
  }
}

export class RemoveRewardTokenCall extends ethereum.Call {
  get inputs(): RemoveRewardTokenCall__Inputs {
    return new RemoveRewardTokenCall__Inputs(this);
  }

  get outputs(): RemoveRewardTokenCall__Outputs {
    return new RemoveRewardTokenCall__Outputs(this);
  }
}

export class RemoveRewardTokenCall__Inputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }

  get stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveRewardTokenCall__Outputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get veId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
