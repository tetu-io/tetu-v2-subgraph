// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CompoundRatioChanged extends ethereum.Event {
  get params(): CompoundRatioChanged__Params {
    return new CompoundRatioChanged__Params(this);
  }
}

export class CompoundRatioChanged__Params {
  _event: CompoundRatioChanged;

  constructor(event: CompoundRatioChanged) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContractInitialized extends ethereum.Event {
  get params(): ContractInitialized__Params {
    return new ContractInitialized__Params(this);
  }
}

export class ContractInitialized__Params {
  _event: ContractInitialized;

  constructor(event: ContractInitialized) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get block(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositToPool extends ethereum.Event {
  get params(): DepositToPool__Params {
    return new DepositToPool__Params(this);
  }
}

export class DepositToPool__Params {
  _event: DepositToPool;

  constructor(event: DepositToPool) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EmergencyExit extends ethereum.Event {
  get params(): EmergencyExit__Params {
    return new EmergencyExit__Params(this);
  }
}

export class EmergencyExit__Params {
  _event: EmergencyExit;

  constructor(event: EmergencyExit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class InvestAll extends ethereum.Event {
  get params(): InvestAll__Params {
    return new InvestAll__Params(this);
  }
}

export class InvestAll__Params {
  _event: InvestAll;

  constructor(event: InvestAll) {
    this._event = event;
  }

  get balance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ManualClaim extends ethereum.Event {
  get params(): ManualClaim__Params {
    return new ManualClaim__Params(this);
  }
}

export class ManualClaim__Params {
  _event: ManualClaim;

  constructor(event: ManualClaim) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevisionIncreased extends ethereum.Event {
  get params(): RevisionIncreased__Params {
    return new RevisionIncreased__Params(this);
  }
}

export class RevisionIncreased__Params {
  _event: RevisionIncreased;

  constructor(event: RevisionIncreased) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldLogic(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategySpecificNameChanged extends ethereum.Event {
  get params(): StrategySpecificNameChanged__Params {
    return new StrategySpecificNameChanged__Params(this);
  }
}

export class StrategySpecificNameChanged__Params {
  _event: StrategySpecificNameChanged;

  constructor(event: StrategySpecificNameChanged) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class WithdrawAllFromPool extends ethereum.Event {
  get params(): WithdrawAllFromPool__Params {
    return new WithdrawAllFromPool__Params(this);
  }
}

export class WithdrawAllFromPool__Params {
  _event: WithdrawAllFromPool;

  constructor(event: WithdrawAllFromPool) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawAllToSplitter extends ethereum.Event {
  get params(): WithdrawAllToSplitter__Params {
    return new WithdrawAllToSplitter__Params(this);
  }
}

export class WithdrawAllToSplitter__Params {
  _event: WithdrawAllToSplitter;

  constructor(event: WithdrawAllToSplitter) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawFromPool extends ethereum.Event {
  get params(): WithdrawFromPool__Params {
    return new WithdrawFromPool__Params(this);
  }
}

export class WithdrawFromPool__Params {
  _event: WithdrawFromPool;

  constructor(event: WithdrawFromPool) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawToSplitter extends ethereum.Event {
  get params(): WithdrawToSplitter__Params {
    return new WithdrawToSplitter__Params(this);
  }
}

export class WithdrawToSplitter__Params {
  _event: WithdrawToSplitter;

  constructor(event: WithdrawToSplitter) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StrategyAbi__doHardWorkResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEarned(): BigInt {
    return this.value0;
  }

  getLost(): BigInt {
    return this.value1;
  }
}

export class StrategyAbi extends ethereum.SmartContract {
  static bind(address: Address): StrategyAbi {
    return new StrategyAbi("StrategyAbi", address);
  }

  CONTROLLABLE_VERSION(): string {
    let result = super.call(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_CONTROLLABLE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "CONTROLLABLE_VERSION",
      "CONTROLLABLE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PLATFORM(): string {
    let result = super.call("PLATFORM", "PLATFORM():(string)", []);

    return result[0].toString();
  }

  try_PLATFORM(): ethereum.CallResult<string> {
    let result = super.tryCall("PLATFORM", "PLATFORM():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  STRATEGY_BASE_VERSION(): string {
    let result = super.call(
      "STRATEGY_BASE_VERSION",
      "STRATEGY_BASE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRATEGY_BASE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRATEGY_BASE_VERSION",
      "STRATEGY_BASE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  STRATEGY_VERSION(): string {
    let result = super.call(
      "STRATEGY_VERSION",
      "STRATEGY_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRATEGY_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRATEGY_VERSION",
      "STRATEGY_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  capacity(): BigInt {
    let result = super.call("capacity", "capacity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_capacity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("capacity", "capacity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compoundRatio(): BigInt {
    let result = super.call("compoundRatio", "compoundRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_compoundRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "compoundRatio",
      "compoundRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  created(): BigInt {
    let result = super.call("created", "created():(uint256)", []);

    return result[0].toBigInt();
  }

  try_created(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("created", "created():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createdBlock(): BigInt {
    let result = super.call("createdBlock", "createdBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdBlock", "createdBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  doHardWork(): StrategyAbi__doHardWorkResult {
    let result = super.call("doHardWork", "doHardWork():(uint256,uint256)", []);

    return new StrategyAbi__doHardWorkResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_doHardWork(): ethereum.CallResult<StrategyAbi__doHardWorkResult> {
    let result = super.tryCall(
      "doHardWork",
      "doHardWork():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyAbi__doHardWorkResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  investAll(param0: BigInt, updateTotalAssetsBeforeInvest_: boolean): BigInt {
    let result = super.call("investAll", "investAll(uint256,bool):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromBoolean(updateTotalAssetsBeforeInvest_)
    ]);

    return result[0].toBigInt();
  }

  try_investAll(
    param0: BigInt,
    updateTotalAssetsBeforeInvest_: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investAll",
      "investAll(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromBoolean(updateTotalAssetsBeforeInvest_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investedAssets(): BigInt {
    let result = super.call("investedAssets", "investedAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_investedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investedAssets",
      "investedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isController(_value: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isController(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGovernance(_value: Address): boolean {
    let result = super.call("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isGovernance(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReadyToHardWork(): boolean {
    let result = super.call(
      "isReadyToHardWork",
      "isReadyToHardWork():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isReadyToHardWork(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReadyToHardWork",
      "isReadyToHardWork():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceReceiver(): Address {
    let result = super.call(
      "performanceReceiver",
      "performanceReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_performanceReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "performanceReceiver",
      "performanceReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previousImplementation(): Address {
    let result = super.call(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_previousImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "previousImplementation",
      "previousImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  revision(): BigInt {
    let result = super.call("revision", "revision():(uint256)", []);

    return result[0].toBigInt();
  }

  try_revision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("revision", "revision():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  splitter(): Address {
    let result = super.call("splitter", "splitter():(address)", []);

    return result[0].toAddress();
  }

  try_splitter(): ethereum.CallResult<Address> {
    let result = super.tryCall("splitter", "splitter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategySpecificName(): string {
    let result = super.call(
      "strategySpecificName",
      "strategySpecificName():(string)",
      []
    );

    return result[0].toString();
  }

  try_strategySpecificName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "strategySpecificName",
      "strategySpecificName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllToSplitter(): BigInt {
    let result = super.call(
      "withdrawAllToSplitter",
      "withdrawAllToSplitter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawAllToSplitter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllToSplitter",
      "withdrawAllToSplitter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawToSplitter(amount: BigInt): BigInt {
    let result = super.call(
      "withdrawToSplitter",
      "withdrawToSplitter(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_withdrawToSplitter(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawToSplitter",
      "withdrawToSplitter(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DoHardWorkCall extends ethereum.Call {
  get inputs(): DoHardWorkCall__Inputs {
    return new DoHardWorkCall__Inputs(this);
  }

  get outputs(): DoHardWorkCall__Outputs {
    return new DoHardWorkCall__Outputs(this);
  }
}

export class DoHardWorkCall__Inputs {
  _call: DoHardWorkCall;

  constructor(call: DoHardWorkCall) {
    this._call = call;
  }
}

export class DoHardWorkCall__Outputs {
  _call: DoHardWorkCall;

  constructor(call: DoHardWorkCall) {
    this._call = call;
  }

  get earned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get lost(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class EmergencyExitCall extends ethereum.Call {
  get inputs(): EmergencyExitCall__Inputs {
    return new EmergencyExitCall__Inputs(this);
  }

  get outputs(): EmergencyExitCall__Outputs {
    return new EmergencyExitCall__Outputs(this);
  }
}

export class EmergencyExitCall__Inputs {
  _call: EmergencyExitCall;

  constructor(call: EmergencyExitCall) {
    this._call = call;
  }
}

export class EmergencyExitCall__Outputs {
  _call: EmergencyExitCall;

  constructor(call: EmergencyExitCall) {
    this._call = call;
  }
}

export class IncreaseRevisionCall extends ethereum.Call {
  get inputs(): IncreaseRevisionCall__Inputs {
    return new IncreaseRevisionCall__Inputs(this);
  }

  get outputs(): IncreaseRevisionCall__Outputs {
    return new IncreaseRevisionCall__Outputs(this);
  }
}

export class IncreaseRevisionCall__Inputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }

  get oldLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IncreaseRevisionCall__Outputs {
  _call: IncreaseRevisionCall;

  constructor(call: IncreaseRevisionCall) {
    this._call = call;
  }
}

export class InvestAllCall extends ethereum.Call {
  get inputs(): InvestAllCall__Inputs {
    return new InvestAllCall__Inputs(this);
  }

  get outputs(): InvestAllCall__Outputs {
    return new InvestAllCall__Outputs(this);
  }
}

export class InvestAllCall__Inputs {
  _call: InvestAllCall;

  constructor(call: InvestAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get updateTotalAssetsBeforeInvest_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class InvestAllCall__Outputs {
  _call: InvestAllCall;

  constructor(call: InvestAllCall) {
    this._call = call;
  }

  get strategyLoss(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetCompoundRatioCall extends ethereum.Call {
  get inputs(): SetCompoundRatioCall__Inputs {
    return new SetCompoundRatioCall__Inputs(this);
  }

  get outputs(): SetCompoundRatioCall__Outputs {
    return new SetCompoundRatioCall__Outputs(this);
  }
}

export class SetCompoundRatioCall__Inputs {
  _call: SetCompoundRatioCall;

  constructor(call: SetCompoundRatioCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCompoundRatioCall__Outputs {
  _call: SetCompoundRatioCall;

  constructor(call: SetCompoundRatioCall) {
    this._call = call;
  }
}

export class SetStrategySpecificNameCall extends ethereum.Call {
  get inputs(): SetStrategySpecificNameCall__Inputs {
    return new SetStrategySpecificNameCall__Inputs(this);
  }

  get outputs(): SetStrategySpecificNameCall__Outputs {
    return new SetStrategySpecificNameCall__Outputs(this);
  }
}

export class SetStrategySpecificNameCall__Inputs {
  _call: SetStrategySpecificNameCall;

  constructor(call: SetStrategySpecificNameCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetStrategySpecificNameCall__Outputs {
  _call: SetStrategySpecificNameCall;

  constructor(call: SetStrategySpecificNameCall) {
    this._call = call;
  }
}

export class SetupPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetupPerformanceFeeCall__Inputs {
    return new SetupPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetupPerformanceFeeCall__Outputs {
    return new SetupPerformanceFeeCall__Outputs(this);
  }
}

export class SetupPerformanceFeeCall__Inputs {
  _call: SetupPerformanceFeeCall;

  constructor(call: SetupPerformanceFeeCall) {
    this._call = call;
  }

  get fee_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetupPerformanceFeeCall__Outputs {
  _call: SetupPerformanceFeeCall;

  constructor(call: SetupPerformanceFeeCall) {
    this._call = call;
  }
}

export class WithdrawAllToSplitterCall extends ethereum.Call {
  get inputs(): WithdrawAllToSplitterCall__Inputs {
    return new WithdrawAllToSplitterCall__Inputs(this);
  }

  get outputs(): WithdrawAllToSplitterCall__Outputs {
    return new WithdrawAllToSplitterCall__Outputs(this);
  }
}

export class WithdrawAllToSplitterCall__Inputs {
  _call: WithdrawAllToSplitterCall;

  constructor(call: WithdrawAllToSplitterCall) {
    this._call = call;
  }
}

export class WithdrawAllToSplitterCall__Outputs {
  _call: WithdrawAllToSplitterCall;

  constructor(call: WithdrawAllToSplitterCall) {
    this._call = call;
  }

  get strategyLoss(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawToSplitterCall extends ethereum.Call {
  get inputs(): WithdrawToSplitterCall__Inputs {
    return new WithdrawToSplitterCall__Inputs(this);
  }

  get outputs(): WithdrawToSplitterCall__Outputs {
    return new WithdrawToSplitterCall__Outputs(this);
  }
}

export class WithdrawToSplitterCall__Inputs {
  _call: WithdrawToSplitterCall;

  constructor(call: WithdrawToSplitterCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawToSplitterCall__Outputs {
  _call: WithdrawToSplitterCall;

  constructor(call: WithdrawToSplitterCall) {
    this._call = call;
  }

  get strategyLoss(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
